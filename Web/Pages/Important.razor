@inject IImportantTaskService importantTaskService

<main class="container border border-3 rounded bg-light" >
	<h1 class="fs-1 fw-bold text-warning text-center">Important</h1>
	<section class="">
		<EditForm Model="createImportantTask" OnValidSubmit="OnCreateTask">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div class="">
				<input type="text" class="form-control form-control-lg" id="" placeholder="What is the Task?" @bind-value="createImportantTask.Description" required maxlength="60">
			</div>
			<div class="d-flex justify-content-center align-items-start">
				<input type="datetime-local" class="form-control  w-50" id="" @bind-value="createImportantTask.EndDate" required>
				<button class="btn btn-primary mb-3 align-self-end">Add <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@HideSpinnerAdd"></span></button>
			</div>
		</EditForm>
				
		<section class="" id="id-task">
			<ul class="list-group">
				@foreach (var taskItem in importantTaskList)
				{
				<li class="list-group-item d-flex justify-content-between align-items-center">
					<a @onclick="@(() => OnDeleteTask(@taskItem.Id))" class="text-decoration-none m-2 badge bg-primary rounded-pill">OK</a>
						<span class="text-center fw-bold text-break">@taskItem.Description</span>
					<div class="d-flex flex-column">
						<span class="badge bg-primary rounded-pill">@taskItem.EndDate.Date.ToShortDateString()</span>
						<span class="col badge bg-light rounded-pill col-auto text-dark">@taskItem.EndDate.ToString("hh:mm tt")</span>
					</div>
				</li>
				}
			</ul>
		</section>
	</section>            
</main>

@code {

	protected List<ImportantTask> importantTaskList;
	protected CreateImportantTaskDTO createImportantTask = new CreateImportantTaskDTO();

	private bool HideSpinnerAdd { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		importantTaskList = await importantTaskService.GetOfUserAsync();
	}


	private async Task OnCreateTask()
	{
		HideSpinnerAdd = false;

		var taskCreateObjectImportantTask = Task<ImportantTask>.Run(() => new ImportantTask
		{
			Description = createImportantTask.Description,
			EndDate = createImportantTask.EndDate
		});

		ImportantTask newImportantTask = await taskCreateObjectImportantTask;

		int idNewTaskFromDb = await AddTaskDBAsync(newImportantTask);

		if (idNewTaskFromDb != 0)
		{
			var taskSetIdInNewObject = Task.Run(() => newImportantTask.Id = idNewTaskFromDb);
			await taskSetIdInNewObject;

			AddTaskInList(newImportantTask);
		}

		createImportantTask = new CreateImportantTaskDTO();
		HideSpinnerAdd = true;
	}


	private async Task<int> AddTaskDBAsync(ImportantTask importantTask)
	{
		return await importantTaskService.AddAsync(importantTask);
	}


	private void AddTaskInList(ImportantTask importantTask)
	{
		importantTaskList.Add(importantTask);
	}


	private async Task OnDeleteTask(int idTask)
	{
		if (idTask != 0)
		{
			bool responseDB = await DeleteInDBAsync(idTask);

			if (responseDB)
			{
				await DeleteInListAsync(idTask);
			}
		}
	}


	private async Task<bool> DeleteInDBAsync(int idTask)
	{
		return await importantTaskService.DeleteAsync(idTask);
	}


	private async Task DeleteInListAsync(int idTask)
	{ 
		var taskFindImportantTaskInList = Task<ImportantTask?>.Run(() => importantTaskList.Find(x => x.Id == idTask));

		ImportantTask? deleteTask = await taskFindImportantTaskInList;

		if (deleteTask != null)
		{
			importantTaskList.Remove(deleteTask);
		}
	}
}